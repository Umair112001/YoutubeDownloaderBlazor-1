@using YoutubeExplode;
@using YoutubeExplode.Converter;
@using YoutubeExplode.Videos;
@using YoutubeExplode.Videos.Streams;

@page "/"
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<PageTitle>ðŸ“º Youtube Downloader</PageTitle>

<div class="my-2">
    <MudText Typo="Typo.h5">Youtube Video Downloader</MudText>
</div>

<div class="d-flex gap-4 my-2">
    <MudTextField @bind-Value="videoUrl" Label="Enter YouTube URL" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
    <MudButton @onclick="Search" Variant="Variant.Filled" Color="Color.Primary">
        Search
    </MudButton>
</div>

@if (loading)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
}
else if (video == null)
{
    <MudText Typo="Typo.body1" Class="my-2">No video found. Please check the URL and try again.</MudText>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6">@video.Title (@video.Author)</MudText>
            <MudImage Src="@video.Thumbnails?.LastOrDefault()?.Url" Width="300" Height="200" />
            <MudText Typo="Typo.body2">@video.Engagement.ViewCount views</MudText>
            <MudText Typo="Typo.body2">@video.Duration</MudText>
        </MudCardContent>
    </MudCard>

    @if (streamManifest == null || (!streamManifest.GetMuxedStreams().Any() && !streamManifest.GetAudioStreams().Any()))
    {
        <MudText Typo="Typo.body1" Class="my-2">No downloadable streams found for this video.</MudText>
    }
    else
    {
        <div class="download-options">
            <MudText Typo="Typo.h6" Class="my-2">Download Options:</MudText>

            <!-- Muxed Streams -->
            @if (streamManifest.GetMuxedStreams().Any())
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1">Muxed Streams (Video + Audio)</MudText>
                        <ul class="stream-list">
                            @foreach (var stream in streamManifest.GetMuxedStreams())
                            {
                                <li>
                                    @stream.VideoQuality.Label | @stream.Container.Name | @(Math.Round(stream.Size.MegaBytes, 2)) MB
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(stream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" /> Download
                                    </MudButton>
                                </li>
                            }
                            @foreach (var videoStream in streamManifest.GetVideoStreams())
                            {
                                <li>
                                    @videoStream.VideoQuality.Label | @videoStream.Container.Name (Video only) | @(Math.Round(videoStream.Size.MegaBytes, 2)) MB
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(videoStream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" /> Download Video + Audio
                                    </MudButton>
                                </li>
                            }
                        </ul>

                    </MudCardContent>
                </MudCard>
            }

            <!-- Video-only Streams -->
            @if (streamManifest.GetVideoStreams().Any())
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1">Video-only Streams</MudText>
                        <ul class="stream-list">
                            @foreach (var stream in streamManifest.GetVideoStreams())
                            {
                                <li>
                                    @stream.VideoQuality.Label | @stream.Container.Name | @(Math.Round(stream.Size.MegaBytes, 2)) MB
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(stream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" /> Download
                                    </MudButton>
                                </li>
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            }

            <!-- Audio-only Streams -->
            @if (streamManifest.GetAudioStreams().Any())
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1">Audio-only Streams</MudText>
                        <ul class="stream-list">
                            @foreach (var stream in streamManifest.GetAudioStreams())
                            {
                                <li>
                                    @stream.Container.Name | @(Math.Ceiling(stream.Bitrate.KiloBitsPerSecond)) kbps | @(Math.Round(stream.Size.MegaBytes, 2)) MB
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(stream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" /> Download
                                    </MudButton>
                                </li>
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            }
        </div>
}
}
@if (downloading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

@code {
    string videoUrl = "";
    bool loading = false;
    bool downloading = false;
    Video? video = null;
    StreamManifest? streamManifest = null;
    IVideoStreamInfo? maxVideoStream = null;

    private async Task Search()
    {
        try
        {
            loading = true;
            var youtube = new YoutubeClient();

            // Fetch video details
            video = await youtube.Videos.GetAsync(videoUrl);
            Snackbar.Add($"Video found: {video.Title} by {video.Author}", Severity.Success);

            // Get stream manifest
            streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);

            if (streamManifest == null)
            {
                Snackbar.Add("StreamManifest is null. Unable to fetch streams.", Severity.Error);
                return;
            }

            // Get all streams
            var muxedStreams = streamManifest.GetMuxedStreams().OrderByDescending(s => s.VideoQuality);
            var videoStreams = streamManifest.GetVideoStreams().OrderByDescending(s => s.VideoQuality);
            var audioStreams = streamManifest.GetAudioStreams().OrderByDescending(s => s.Bitrate);

            if (!muxedStreams.Any() && !videoStreams.Any() && !audioStreams.Any())
            {
                Snackbar.Add("No downloadable streams found. This may be due to restrictions or unsupported formats.", Severity.Warning);
            }
            else
            {
                Snackbar.Add($"Streams found: {muxedStreams.Count()} muxed streams, {videoStreams.Count()} video streams, {audioStreams.Count()} audio streams.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching video: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }



    private async Task DownloadVideo(IStreamInfo videoStreamInfo)
    {
        try
        {
            downloading = true;
            var youtube = new YoutubeClient();

            string fileName = new string(video?.Title.Select(c => Path.GetInvalidFileNameChars().Contains(c) ? '_' : c).ToArray());
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads", $"{fileName}.mp4");

            // Get the highest-bitrate audio stream
            var audioStream = streamManifest.GetAudioStreams().GetWithHighestBitrate();

            // Combine video and audio streams and download
            await youtube.Videos.DownloadAsync(new[] { videoStreamInfo, audioStream }, new ConversionRequestBuilder(filePath).Build());
            await JsRuntime.InvokeVoidAsync("alert", "Download successful with audio!");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Download failed: {ex.Message}");
        }
        finally
        {
            downloading = false;
        }
    }
    

    private async Task DownloadHdVideo(IVideoStreamInfo videoStreamInfo)
    {
        try
        {
            downloading = true;
            var youtube = new YoutubeClient();

            string fileName = new string(video?.Title.Select(c => Path.GetInvalidFileNameChars().Contains(c) ? '_' : c).ToArray());
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads", $"{fileName}.mp4");

            var audioStream = streamManifest.GetAudioStreams().GetWithHighestBitrate();
            var streams = new[] { videoStreamInfo, audioStream };

            await youtube.Videos.DownloadAsync(streams, new ConversionRequestBuilder(filePath).Build());
            await JsRuntime.InvokeVoidAsync("alert", "HD Video downloaded successfully!");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"HD Download failed: {ex.Message}");
        }
        finally
        {
            downloading = false;
        }
    }
}
