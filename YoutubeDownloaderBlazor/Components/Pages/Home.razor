@using YoutubeExplode;
@using YoutubeExplode.Videos
@using YoutubeExplode.Videos.Streams;

@page "/"
@rendermode InteractiveServer

<PageTitle>Downloader</PageTitle>

<h3>Index</h3>


@if (loading)
{
    <span>wait...</span>
}


<input type="text" @bind="videoUrl" placeholder="Enter video url" />
<button type="button" @onclick="Search">Search</button>

@if (video != null)
{
    <ul>
        <li>@video.Title (@video.Duration)</li>
        <li>@video.Description</li>
        <li>@video.Author</li>
        <ul>
            @foreach (var thum in video.Thumbnails.Where(a => a.Resolution == YoutubeExplode.Common.Resolut))
            {
                <li>
                    @thum.Resolution : <img src="@thum.Url" />
                </li>
            }
        </ul>
    </ul>


}

@if (streamManifest != null)
{
    <h4>Muxed Streams:</h4>
    <ul>
        @foreach (var sinfo in streamManifest.GetMuxedStreams())
        {
            <li>@sinfo.Bitrate</li>
        }
    </ul>

    <h4>Streams:</h4>
    <ul>
        @foreach (var stream in streamManifest.Streams)
        {
            <li>@stream.Bitrate</li>
        }
    </ul>
}


@code {
    /* https://www.youtube.com/watch?v=rzmU8ZY5ODI */
    string videoUrl = "";
    bool loading = false;
    Video? video = null;
    StreamManifest? streamManifest = null;
    string msg = "";

    protected override async Task OnInitializedAsync()
    {
        // Call the DownloadVideo method when the page loads
        await DownloadVideo();
    }

    private async Task Search()
    {
        try
        {
            loading = true;
            var youtube = new YoutubeClient();
            video = await youtube.Videos.GetAsync(videoUrl);
            streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);

        }
        catch (Exception ex)
        {
            msg = "Download to search video";
        }
        finally
        {
            loading = false;
        }
    }

    async Task DownloadVideo()
    {
        try
        {
            loading = true;

            var youtube = new YoutubeClient();

            var video = await youtube.Videos.GetAsync(videoUrl);
            var streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);
            // Get highest quality muxed stream
            var streamInfo = streamManifest.GetMuxedStreams().GetWithHighestVideoQuality();
            // Get the actual stream
            var stream = await youtube.Videos.Streams.GetAsync(streamInfo);

            // Download the stream to a file
            // Specify the full path for the downloaded file
            var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"video.{streamInfo.Container}");

            // Download the stream to a file//
            await youtube.Videos.Streams.DownloadAsync(streamInfo, filePath);
            msg = "Downloaded";
        }
        catch (Exception ex)
        {
            msg = "Download failed";
        }
        finally
        {
            //finally
            loading = false;
        }
    }
}
