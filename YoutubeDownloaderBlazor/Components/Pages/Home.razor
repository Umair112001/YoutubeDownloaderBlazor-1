@using YoutubeExplode;
@using YoutubeExplode.Videos
@using YoutubeExplode.Videos.Streams;

@page "/"
@rendermode InteractiveServer

<PageTitle>Downloader</PageTitle>

<h3>Index</h3>


@if (loading)
{
    <span>wait...</span>
}


<input type="text" @bind="videoUrl" placeholder="Enter video url" />
<button type="button" @onclick="Search">Search</button>

@if (video != null)
{
    <ul>
        <li>@video.Title (@video.Duration | @video.Author)</li>
        <li><img src="@video.Thumbnails?.LastOrDefault()?.Url" style="width:300px;height:200px" /></li>
        <li>Views: @video.Engagement.ViewCount</li>
        <li>Likes: @video.Engagement.LikeCount</li>
    </ul>


}

@if (streamManifest != null)
{
    <h4>Muxed Streams:</h4>
    <ul>
        @foreach (var stream in streamManifest.GetMuxedStreams())
        {
            <li>
                @stream.Container.Name | @stream,.VideoQuality.Label |   @(Math.Round(stream.Size.MegaBytes,2)) MB
                <button @onclick="()=>DownloadVideo(stream)">Download</button>

            </li>
        }
    </ul>


    <h4>Audio Only:</h4>
     <ul>
        @foreach (var stream in streamManifest.GetAudioStreams())
        {
            <li>
                @stream.Container.Name
                |@(Math.Ceiling(stream.Bitrate.KiloBitsPerSecond)) kbps
               | @(Math.Round(stream.Size.MegaBytes,2)) MB
                | <button @onclick="()=>DownloadVideo(stream)">Download</button>
                </li>
        }
    </ul>
}


@code {
    /* https://www.youtube.com/watch?v=8yP6OE4jDEw */
    string videoUrl = "https://www.youtube.com/watch?v=8yP6OE4jDEw";
    bool loading = false;
    Video? video = null;
    StreamManifest? streamManifest = null;
    string msg = "";

    // protected override async Task OnInitializedAsync()
    // {
    //     // Call the DownloadVideo method when the page loads
    // }

    private async Task Search()
    {
        try
        {
            loading = true;
            var youtube = new YoutubeClient();
            video = await youtube.Videos.GetAsync(videoUrl);
            streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);
        }
        catch (Exception ex)
        {
            msg = "Download to search video";
        }
        finally
        {
            loading = false;
        }
    }

    async Task DownloadVideo(IStreamInfo streamInfo)
    {
        try
        {
            loading = true;

            var youtube = new YoutubeClient();
            var streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);
            // Get the actual stream
            var stream = await youtube.Videos.Streams.GetAsync(streamInfo);

            // Download the stream to a file
            string invalidChars = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
             string filename = new string(video?.Title.Select(c => invalidChars.Contains(c) ? '_' : c).ToArray());
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"{filename}.{streamInfo.Container.Name}");
            // var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"video.{streamInfo.Container}");

            // Download the stream to a file//
            await youtube.Videos.Streams.DownloadAsync(streamInfo, filePath);
            msg = "Downloaded";
        }
        catch (Exception ex)
        {
            msg = "Download failed";
        }
        finally
        {
            //finally
            loading = false;
        }
    }
}
