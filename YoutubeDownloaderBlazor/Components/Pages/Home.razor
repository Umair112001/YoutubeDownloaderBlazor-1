@using YoutubeExplode;
@using YoutubeExplode.Videos
@using YoutubeExplode.Videos.Streams;

@page "/"
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<PageTitle>📺 Youtube Downloader</PageTitle>

<div class="my-2">
    <MudText Typo="Typo.h5">Youtube Video Downloader</MudText>
</div>

<div class="d-flex gap-4 my-2">
    <MudTextField @bind-Value="videoUrl" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
    <MudButton @onclick="Search" Variant="Variant.Filled" Color="Color.Primary">
        Search
    </MudButton>
</div>

@if (loading)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
}

@if (!downloading)
{
    @if (video != null)
    {
        <MudCard>
            <MudCardContent>

                <MudText Typo="Typo.h6">
                    @video.Title (@video.Duration | @video.Author)
                </MudText>

                <MudImage Src="@video.Thumbnails?.LastOrDefault()?.Url" Width="300" Height="200" />

                <MudText Typo="Typo.body2" Class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="icon" />
                    @video.Engagement.ViewCount
                </MudText>

                <MudText Typo="Typo.body2" Class="d-flex align-center gap-2">
                    <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Class="icon" />
                    @video.Engagement.LikeCount
                </MudText>
            </MudCardContent>
        </MudCard>
    }


    @if (streamManifest != null)
    {
        <div class="download-options">
            <div class="video">
                <MudText Typo="Typo.h6" Class="my-2">Video options:</MudText>
                <MudCard Class="stream-card">
                    <MudCardContent>
                        <ul class="stream-list">
                           
                            @foreach (var stream in streamManifest.GetMuxedStreams())
                            {
                                <li class="stream-item">
                                    <span class="stream-info">
                                        @stream.VideoQuality.Label | @stream.Container.Name | @(Math.Round(stream.Size.MegaBytes, 2)) MB
                                    </span>
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(stream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" Class="icon" />
                                        Download
                                    </MudButton>
                                </li>
                            }

                            @* Displaying hd video info *@
                            @if (maxVideoStream != null)
                            {
                                <li class="stream-item">
                                    <span class="stream-info">
                                        @maxVideoStream.VideoQuality.Label |  @maxVideoStream.Container.Name | @(Math.Round(maxVideoStream.Size.MegaBytes, 2)) MB
                                    </span>
                                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(maxVideoStream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" Class="icon" />
                                        Download
                                    </MudButton>
                                </li>
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            </div>
           
            <div class="audio">

                <MudText Typo="Typo.h6" Class="my-2">Audio options:</MudText>
                <MudCard Class="stream-card">
                    <MudCardContent>
                        <ul class="stream-list">
                            @foreach (var stream in streamManifest.GetAudioStreams())
                            {
                                <li>
                                    @stream.Container.Name
                                    | @(Math.Ceiling(stream.Bitrate.KiloBitsPerSecond)) kbps
                                    | @(Math.Round(stream.Size.MegaBytes, 2)) MB
                                    | <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="()=>DownloadVideo(stream)">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" Class="icon" />
                                        Download
                                    </MudButton>
                                </li>
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>
    }
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}


@code {
    string videoUrl = "https://www.youtube.com/watch?v=e-ORhEE9VVg";
    bool loading = false;
    bool downloading = false;
    Video? video = null;
    StreamManifest? streamManifest = null;
    IVideoStreamInfo? maxVideoStream = null;
    private async Task Search()
    {
        try
        {
            loading = true;
            var youtube = new YoutubeClient();
            video = await youtube.Videos.GetAsync(videoUrl);
            streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);
            maxVideoStream = streamManifest.GetVideoStreams().Where(s => s.Container == Container.Mp4).FirstOrDefault(s => s.VideoQuality.Label.Contains("1080"));
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error on searching video", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    async Task DownloadVideo(IStreamInfo streamInfo)
    {
        try
        {
            downloading = true;

            var youtube = new YoutubeClient();
            var streamManifest = await youtube.Videos.Streams.GetManifestAsync(videoUrl);
            // Get the actual stream
            var stream = await youtube.Videos.Streams.GetAsync(streamInfo);

            string invalidChars = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
            //remove invalid character from file
            string filename = new string(video?.Title.Select(c => invalidChars.Contains(c) ? '_' : c).ToArray());
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads", $"{filename}.{streamInfo.Container.Name}");

            // Download the stream to a file//
            await youtube.Videos.Streams.DownloadAsync(streamInfo, filePath);
            // Snackbar.Add("Downloaded successfully to downloads folder", Severity.Success);

            //It is temperory, since snackbar is not working here
            await JsRuntime.InvokeVoidAsync("alert", "Downloaded successfully to downloads folder");
        }
        catch (Exception ex)
        {
            //Snackbar.Add("Download failed", Severity.Error);
            await JsRuntime.InvokeVoidAsync("alert", "Download failed");
        }
        finally
        {
            downloading = false;
        }
    }
}
